/**
 * The <class>System.view.system.detail.form.panel.BaseDetailFormPanelController</class> defines
 * the controller methods for the System.view.system.detail.form.panel.BaseDetailFormPanel
 *
 * @author Andrew
 */
Ext.define('System.view.system.detail.form.panel.BaseDetailFormPanelController', {
    extend: 'Ext.app.ViewController',

    ///////////////////////////////////////////////////////////////////////
    ////////                                                     Properties                                                       //////////
    /////////////////////////////////////////////////////////////////////

    alias: 'controller.baseDetailFormPanelController',

    requires: [
        'System.util.data.RecordUtils',
        'System.util.application.Util'
    ],

    ///////////////////////////////////////////////////////////////////////
    ////////                                                       Methods                                                         //////////
    /////////////////////////////////////////////////////////////////////

    /**
     * Close the window
     */
    cancel: function () {
        this.view.up('window').close();
    },

    /**
     * If the form is valid then save it to the server and close the window
     */
    save: function () {
        var form = this.view.form;
        var record = this.view.config.initialFormRecord;

        form.getFieldValues = function (dirtyOnly) {
            return this.getValues(false, true, false, true);
        };

        // make sure the form contains valid data before submitting
        if (form.isValid()) {
            if (form.isDirty() || record.isDirty()) {

                // update the record with the form data
                var fieldValuesWithId = form.getValues(false, !record.phantom, false, true, false);

                var store = record.store;
                var storeRecord = store.getById(record.id);

                if (storeRecord) {
                    record.set(fieldValuesWithId);
                    record = storeRecord;
                    record.set(fieldValuesWithId);
                } else {
                    if (record.id == undefined && fieldValuesWithId.id == null) {
                        delete fieldValuesWithId['id'];
                    }
                    record.set(fieldValuesWithId);
                    record = store.add(record)[0];
                }

                store.sync({
                    success: function (batch, options) {
                        if (this.referenceEntity) {
                            //If this is a new entity generated by an underlying entity then we will set this new entity
                            // on that underlying reference entity form field combo
                            if (this.referenceEntity.setValue) {
                                this.referenceEntity.setValue(this.record[0] ? this.record[0] : this.record);
                            }
                        }
                    },
                    scope: {
                        referenceEntity: this.view.referenceEntity,
                        store: store,
                        record: record
                    }
                });

            }

            this.view.up('window').close();

        } else {
            // display error alert if the data is invalid
            System.util.application.Util.showInfoMessage('Invalid Data', 'Please correct form errors.')
        }
    }
});